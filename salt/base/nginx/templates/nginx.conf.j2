{% if pillar['nginx_runtime_user'] is defined %}
    {% set nginx_runtime_user = pillar['nginx_runtime_user'] %}
{% else %}
    {% set nginx_runtime_user = "nginx" %}
{% endif -%}

{# nginx log directory #}
{% if pillar['nginx_log_dir'] is defined and pillar['nginx_log_dir'] %}
    {% set nginx_log_dir = pillar['nginx_log_dir'] %}
{% else %}
    {% set nginx_log_dir = "/data/logs/nginx" %}
{% endif -%}

user                    {{ nginx_runtime_user }} {{ nginx_runtime_user }};
worker_processes        auto;
worker_cpu_affinity     auto;
worker_rlimit_nofile    819200;

{% if nginx_log_dir.endswith('/') %}
error_log   {{ nginx_log_dir }}error.log  notice;
{% else %}
error_log   {{ nginx_log_dir }}/error.log  notice;
{% endif %}
pid         /run/nginx.pid;

events {
    accept_mutex        off;
    multi_accept        on;
    use                 epoll;
    worker_connections  65535;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_iso8601] "$server_name" "$request_method" "$request_uri" '
                      '"$server_protocol" "$status" "$body_bytes_sent" "$http_referer" "$http_user_agent" "$http_x_forwarded_for" '
                      '"$request_time" "$upstream_addr" "$upstream_connect_time" "$upstream_response_time" "$upstream_status"';

    {% if nginx_log_dir.endswith('/') %}
    access_log  {{ nginx_log_dir }}access.log main;
    {% else %}
    access_log  {{ nginx_log_dir }}/access.log main;
    {% endif %}

    sendfile        on;
    tcp_nodelay     on;

    server_tokens   off;

    client_body_buffer_size     128k;
    client_header_buffer_size   64k;
    client_max_body_size        30m;
    large_client_header_buffers 8 128k;

    keepalive_timeout   65;
    keepalive_disable   msie6;

    # gzip config
    gzip                on;
    gzip_buffers        32 4k;
    gzip_comp_level     2;
    gzip_disable        msie6;
    gzip_http_version   1.1;
    gzip_min_length     10k;
    gzip_vary           on;
    gzip_types          text/plain text/xml text/css application/javascript application/json;

    # ssl config
    ssl_ciphers                 EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers   on;
    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache           shared:SSL_SESSION:10m;
    ssl_session_timeout         10m;

    # proxy config
    proxy_buffering             on;
    proxy_buffer_size           128k;
    proxy_buffers               4 128k;
    proxy_busy_buffers_size     256k;
    proxy_temp_file_write_size  256k;
    proxy_next_upstream         error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_next_upstream         off;
    proxy_connect_timeout       60s;
    proxy_send_timeout          60s;
    proxy_read_timeout          60s;

    # map config
    map $http_user_agent $agent {
        default         0;
        ~*apachebench   1;
        ~*coccobot	    1;
        ~*bytespider	1;
        ~*Siege         1;
        ~*wget          1;
        ~*Java          1;
    }

    server {
        listen       {{ salt['pillar.get']('nginx_http_port', 80) }} default_server backlog=65535;
        server_name  _;

        location / {
            root        html;
            index       index.html index.htm;
            access_log  off;
            deny        all;
        }

        location /nginx_status {
            stub_status;
            access_log  off;
            allow       127.0.0.1;
            allow       10.0.0.0/8;
            allow       172.16.0.0/12;
            allow       192.168.0.0/16;
            deny        all;
        }

        error_page  404              /404.html;
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            internal;
        }

        location = /404.html {
            internal;
        }
    }

    {% if pillar['nginx_ssl_enable'] %}
    server {
        listen       {{ salt['pillar.get']('nginx_https_port', 443) }} ssl http2 default_server backlog=65535;
        server_name  _;

        {% if pillar['nginx_ssl_certs_dir'].endswith('/') %}
        ssl_certificate     {{ pillar['nginx_ssl_certs_dir'] }}{{ pillar['nginx_ssl_default_cert'] }};
        ssl_certificate_key {{ pillar['nginx_ssl_certs_dir'] }}{{ pillar['nginx_ssl_default_cert_key'] }};
        {% else %}
        ssl_certificate     {{ pillar['nginx_ssl_certs_dir'] }}/{{ pillar['nginx_ssl_default_cert'] }};
        ssl_certificate_key {{ pillar['nginx_ssl_certs_dir'] }}/{{ pillar['nginx_ssl_default_cert_key'] }};
        {% endif %}

        location / {
            root        html;
            index       index.html index.htm;
            access_log  off;
            deny        all;
        }

        error_page  404              /404.html;
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            internal;
        }

        location = /404.html {
            internal;
        }
    }
    {% endif %}
    # include extra config
    include /etc/nginx/conf.d/*.conf;
}